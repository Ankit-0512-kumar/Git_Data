async function createOrUpdateConfigFile(destinationFolder, filePaths) {
    try {
        const configFilePath = path.join(__dirname, 'config.SYS');

        // Read existing config.SYS content
        let existingConfigContent = '';
        try {
            existingConfigContent = await fs.readFile(configFilePath, 'utf-8');
        } catch (error) {
            if (error.code !== 'ENOENT') {
                throw error; // Re-throw if the error is not 'file not found'
            }
        }

        // Split the existing content into lines for checking existing entries
        const existingEntries = new Set(existingConfigContent.split('\n').map(line => line.split('\t')[2]));

        // Prepare the content for the config.SYS file
        let configContent = existingConfigContent || 'CRC\tSIZE\tFILENAME\n'; // Header line if file is new

        for (const filePath of filePaths) {
            const destinationPath = path.join(destinationFolder, path.basename(filePath));

            let destination2 = destinationPath.replace(/\\/g, '/');
            if (!destination2.startsWith('/')) {
                destination2 = '/' + destination2; // Ensures path starts with '/'
            }

            // Check if the file already exists in the destination folder
            let fileExistsInDest = false;
            try {
                await fs.access(destinationPath);
                fileExistsInDest = true;
                console.log(`File ${destinationPath} already exists, skipping copy.`);
            } catch (error) {
                if (error.code === 'ENOENT') {
                    // File does not exist, so copy it
                    await fs.copyFile(filePath, destinationPath);
                    console.log(`File copied to ${destinationPath}`);
                } else {
                    throw error; // Re-throw if the error is not 'file not found'
                }
            }

            // Check if the file is already listed in the config.SYS
            if (fileExistsInDest && existingEntries.has(destination2)) {
                console.log(`File ${destination2} is already listed in config.SYS, skipping entry.`);
                continue;
            }

            // Get size of current file
            const stats = await fs.stat(filePath);
            const fileSize = stats.size;

            // Append CRC, size, and filename to the config file content
            configContent += `1\t${fileSize}\t${destination2}\n`;
        }

        // Write or append the config.SYS file
        await fs.writeFile(configFilePath, configContent, { flag: 'w' });
        console.log(`Config file saved to ${configFilePath}`);

        return configFilePath;
    } catch (error) {
        console.error('Error creating or updating config file:', error);
        throw error;
    }
}

ipcMain.on('upload-files', async(event, { filePaths }) => {
    try {
        console.log(`Received file upload request:`, filePaths);

        const destinationFolder = localPath; // Assuming `localPath` is defined and points to the correct folder

        // Call the createOrUpdateConfigFile function
        const configFilePath = await createOrUpdateConfigFile(destinationFolder, filePaths);

        // Optionally, send back a confirmation or update UI as needed
        event.sender.send('files-uploaded', {
            filePaths: filePaths.map(fp => path.join(destinationFolder, path.basename(fp))),
            configFilePath
        });
    } catch (error) {
        console.error('Error uploading files:', error);
        // Handle error appropriately (send error to renderer process or log)
    }
});