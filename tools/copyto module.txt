async function writeToFile(filePaths, destinationFolder) {
    try {
        const configFilePath = path.join(__dirname, 'CONFIG.SYS')

        // Check if the file already has content
        let fileContent = ''
        try {
            fileContent = await fs.readFile(configFilePath, 'utf8')
        } catch (err) {
            if (err.code !== 'ENOENT') {
                throw err // Re-throw if error is not "file not found"
            }
        }

        // Fetch file sizes for each filePath asynchronously
        const fileDataPromises = filePaths.map(async(fp) => {
            const absolutePath = path.join(destinationFolder, path.basename(fp))
            const relativePath = path.join('/', absolutePath).replace(/\\/g, '/')
            const stats = await stat(fp)
            const crc = await calculateFileCRC32(fp)
            return {
                absolutePaths: absolutePath,
                path: relativePath,
                size: stats.size,
                crc: crc.toString(16).toUpperCase().padStart(8, '0')
            }
        })

        // Wait for all promises to resolve
        const fileData = await Promise.all(fileDataPromises)

        // Format data with headings and file sizes
        let formattedContent = ''
        if (!fileContent.includes('  CRC             SIZE   FILENAME')) {
            formattedContent += '  CRC             SIZE   FILENAME\n'
        }

        fileData.forEach((item) => {
            formattedContent += `${item.crc}    ${item.size
          .toString()
          .padStart(10)}   ${item.path}\n`
        })

        // Append to CONFIG.SYS
        await fs.writeFile(configFilePath, formattedContent, { flag: 'a' }) // Append mode

        console.log('Data appended to CONFIG.SYS')

        // Now call CopyToMudules with the formatted fileData
        await CopyToMudules(fileData)
    } catch (error) {
        console.error('Error writing to CONFIG.SYS:', error)
        throw error // Propagate the error upwards
    }
}
async function CopyToMudules(fileData) {

    try {
        const checks = fileData.map(async(item) => {
            try {
                await fs.access(item.absolutePaths)
                console.log(`File exists: ${item.absolutePaths}`)

                // Destination path on the remote server
                const remotePath = `/usr/share/apache2/htdocs${ item.path }`

                // Upload the file to the remote server
                await uploadFile(
                    '192.168.0.243',
                    item.absolutePaths,
                    remotePath
                )
                console.log(`File copied to module  ${remotePath}`)
            } catch (err) {
                console.error(err)
            }
        })

        await Promise.all(checks)
    } catch (err) {
        console.error('error')
    }
}
