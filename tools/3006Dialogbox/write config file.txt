
// Function to write file paths to CONFIG.SYS
async function writeToFile(filePaths, destinationFolder) {
    try {
        const configFilePath = path.join(__dirname, 'CONFIG.SYS');
        // Map each filePath to a formatted path and join with newline
        const filePathsFormatted = filePaths.map(fp => {
            // Calculate relative path from destinationFolder
            const relativePath = path.join(destinationFolder, path.basename(fp));
            // Ensure path starts with '/'
            return `/${relativePath.replace(/\\/g, '/')}`;
        }).join('\n');
        // Ensure filePathsFormatted starts and ends with newline
        const configContent = `\n${filePathsFormatted}`;

        console.log(configContent)
        await fs.writeFile(configFilePath, configContent, { flag: 'a' }); // Append mode
        // console.log(`File paths appended to CONFIG.SYS`);
    } catch (error) {
        console.error('Error writing to CONFIG.SYS:', error);
        throw error; // Propagate the error upwards
    }
}










async function writeToFile(filePaths, destinationFolder) {
    try {
        const configFilePath = path.join(__dirname, 'CONFIG.SYS')

        // Check if the file already has content
        let fileContent = ''
        try {
            fileContent = await fs.readFile(configFilePath, 'utf8')
        } catch (err) {
            if (err.code !== 'ENOENT') {
                throw err // Re-throw if error is not "file not found"
            }
        }

        // Fetch file sizes for each filePath asynchronously
        const sizePromises = filePaths.map(async(fp) => {
            const absolutePath = path
                .join('/', destinationFolder, path.basename(fp))
                .replace(/\\/g, '/')
            const stats = await stat(fp)
            return { path: absolutePath, size: stats.size }
        })

        // Wait for all size promises to resolve
        const sizes = await Promise.all(sizePromises)

        // Format data with headings and file sizes
        let formattedContent = ''
        if (!fileContent.includes('  CRC             SIZE   FILENAME')) {
            formattedContent += '  CRC             SIZE   FILENAME\n'
        }

        sizes.forEach((item) => {
            formattedContent += `E923C5BF    ${item.size.toString().padStart(10)}   ${item.path}\n`
        })

        // Append to CONFIG.SYS
        await fs.writeFile(configFilePath, formattedContent, { flag: 'a' }) // Append mode

        console.log('Data appended to CONFIG.SYS')
    } catch (error) {
        console.error('Error writing to CONFIG.SYS:', error)
        throw error // Propagate the error upwards
    }
}
